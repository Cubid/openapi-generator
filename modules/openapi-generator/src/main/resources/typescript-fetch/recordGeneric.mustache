import {ApiRecordUtils, knownRecordFactories{{#isMetaDataResponse}}, appFromJS, NormalizedRecordEntities{{/isMetaDataResponse}}} from "../runtimeSagasAndRecords";
import {List, Record, RecordOf} from 'immutable';
import {Schema, schema, NormalizedSchema} from "normalizr";

import { {{classname}} } from './';

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
import { {{classname}}{{enumName}} } from "./";
{{/isEnum}}
{{/vars}}
{{/hasEnums}}

{{#hasImports}}
import {
    {{#imports}}
    {{{.}}},
    {{/imports}}
{{#modelImports}}
    {{.}}Record,
    {{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}RecordUtils,
{{/modelImports}}
} from './';
{{/hasImports}}

export const {{classname}}RecordProps = {
	recType: "{{classname}}Record" as "{{classname}}Record",
{{#vars}}
    {{#isArray}}
    {{#items.isModel}}
    {{name}}: ({{{items.dataType}}}Record(), {{#required}}{{{defaultValue}}}{{/required}}{{^required}}null as {{{dataTypeAlternate}}} | null{{/required}}),
    {{/items.isModel}}
    {{^items.isModel}}
    {{name}}: {{#required}}{{{defaultValue}}}{{/required}}{{^required}}null as {{{dataTypeAlternate}}} | null{{/required}},
    {{/items.isModel}}
    {{/isArray}}
    {{#isModel}}
    {{name}}: {{#required}}{{{defaultValue}}}{{/required}}{{^required}}({{{defaultValue}}}, null as {{{dataTypeAlternate}}} | null){{/required}},
    {{/isModel}}
    {{^isContainer}}
    {{^isModel}}
    {{name}}: {{#required}}{{{defaultValue}}}{{/required}}{{^required}}null as {{{dataTypeAlternate}}} | null{{/required}},
    {{/isModel}}
    {{/isContainer}}
{{/vars}}
};

export type {{classname}}RecordPropsType = typeof {{classname}}RecordProps;
export const {{classname}}Record = Record({{classname}}RecordProps, {{classname}}RecordProps.recType);
export type {{classname}}Record = RecordOf<{{classname}}RecordPropsType>;

knownRecordFactories.set({{classname}}RecordProps.recType, {{classname}}Record);

{{#isEntity}}
export const {{classname}}RecordEntityProps = {
	...{{classname}}RecordProps,
	recType: "{{classname}}RecordEntity" as "{{classname}}RecordEntity",
{{#vars}}
    {{#isEntity}}
    {{name}}: {{#required}}"-1"{{/required}}{{^required}}null as string | null{{/required}},
    {{/isEntity}}
    {{#isArray}}
    {{#items.isEntity}}
    {{name}}: {{#required}}List<string>(){{/required}}{{^required}}null as List<string> | null{{/required}},
    {{/items.isEntity}}
    {{/isArray}}
{{/vars}}
};

export type {{classname}}RecordEntityPropsType = typeof {{classname}}RecordEntityProps;
export const {{classname}}RecordEntity = Record({{classname}}RecordEntityProps, {{classname}}RecordEntityProps.recType);
export type {{classname}}RecordEntity = RecordOf<{{classname}}RecordEntityPropsType>;

knownRecordFactories.set({{classname}}RecordEntityProps.recType, {{classname}}RecordEntity);
{{/isEntity}}

class {{classname}}RecordUtils extends ApiRecordUtils<{{classname}}, {{classname}}Record> {
	public normalize(apiObject: {{classname}}, asEntity?: boolean): {{classname}} {
		(apiObject as any).recType = {{#isEntity}}asEntity ? "{{classname}}RecordEntity" : {{/isEntity}}"{{classname}}Record";
{{#vars}}
        {{#isUniqueId}}
        {{^required}}if (apiObject.{{name}}) { {{/required}}(apiObject as any).{{name}} = apiObject.{{name}}.toString();{{^required}} } {{/required}}
        {{/isUniqueId}}
        {{#isModel}}
        {{^required}}if (apiObject.{{name}}) { {{/required}}{{#lambda.camelcase}}{{dataTypeAlternate}}{{/lambda.camelcase}}Utils.normalize(apiObject.{{name}});{{^required}} } {{/required}}
        {{/isModel}}
        {{#isArray}}
        {{#items.isModel}}
        {{^required}}if (apiObject.{{name}}) { {{/required}}{{#lambda.camelcase}}{{items.dataType}}{{/lambda.camelcase}}RecordUtils.normalizeArray(apiObject.{{name}});{{^required}} } {{/required}}
        {{/items.isModel}}
        {{/isArray}}
{{/vars}}
		return apiObject;
	}
{{#isEntity}}

	public getSchema(): Schema {
	    return new schema.Entity("{{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}}", {
{{#vars}}
            {{#isEntity}}
            {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}: {{#lambda.camelcase}}{{dataTypeAlternate}}{{/lambda.camelcase}}Utils.getSchema(),
            {{/isEntity}}
            {{#isArray}}
            {{#items.isEntity}}
            {{#lambda.camelcase}}{{name}}{{/lambda.camelcase}}: [{{#lambda.camelcase}}{{items.dataType}}{{/lambda.camelcase}}RecordUtils.getSchema()],
            {{/items.isEntity}}
            {{/isArray}}
{{/vars}}
		});
	}
{{/isEntity}}
{{#isMetaDataResponse}}
{{#vars.1}}

	public fromApi_data(apiObject: {{classname}}): {{{dataTypeAlternate}}} {
    {{#isModel}}
	    if (!apiObject.data) {return {{{defaultValue}}}; }
		const normalizedApiObject = {{#lambda.camelcase}}{{dataTypeAlternate}}{{/lambda.camelcase}}Utils.normalize(apiObject.data);
		return appFromJS(normalizedApiObject);
    {{/isModel}}
    {{#isArray}}
    {{#items.isModel}}
	    if (!apiObject.data) {return {{{defaultValue}}}; }
		const normalizedApiObject = {{#lambda.camelcase}}{{items.dataType}}{{/lambda.camelcase}}RecordUtils.normalizeArray(apiObject.data);
		return appFromJS(normalizedApiObject);
    {{/items.isModel}}
    {{^items.isModel}}
	    return apiObject.data;
    {{/items.isModel}}
    {{/isArray}}
    {{^isModel}}
    {{^isArray}}
	    return apiObject.data;
    {{/isArray}}
    {{/isModel}}
	}

	public fromApiAsEntities_data(apiObject: {{classname}}): NormalizedRecordEntities {
    {{#isEntity}}
		if (!apiObject.data) {return {entities: {}, result: List<string>()}; }
		return ApiRecordUtils.toNormalizedRecordEntities({{#lambda.camelcase}}{{dataTypeAlternate}}{{/lambda.camelcase}}Utils.normalizeArrayAsEntities([apiObject.data]), true);
    {{/isEntity}}
    {{#isArray}}
    {{#items.isEntity}}
		if (!apiObject.data) {return {entities: {}, result: List<string>()}; }
		return ApiRecordUtils.toNormalizedRecordEntities({{#lambda.camelcase}}{{items.dataType}}{{/lambda.camelcase}}RecordUtils.normalizeArrayAsEntities(apiObject.data), true);
    {{/items.isEntity}}
    {{^items.isEntity}}
	    console.log("entities revival not supported on this response");
		return {entities: {}, result: List<string>()};
    {{/items.isEntity}}
    {{/isArray}}
    {{^isEntity}}
    {{^isArray}}
	    console.log("entities revival not supported on this response");
		return {entities: {}, result: List<string>()};
    {{/isArray}}
    {{/isEntity}}
	}
{{/vars.1}}
{{/isMetaDataResponse}}
}

export const {{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}}RecordUtils = new {{classname}}RecordUtils();