/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {ApiRecordUtils, knownRecordFactories, appFromJS, NormalizedRecordEntities} from "../runtimeSagasAndRecords";
import {List, Record, RecordOf} from 'immutable';
import {Schema, schema, NormalizedSchema} from "normalizr";

import { FindPetsByUserResponse } from './';


import {
    ResponseMeta,
    User,
    ResponseMetaRecord,
    responseMetaRecordUtils,
    UserRecord,
    userRecordUtils,
} from './';

export const FindPetsByUserResponseRecordProps = {
	recType: "FindPetsByUserResponseRecord" as "FindPetsByUserResponseRecord",
    meta: ResponseMetaRecord(),
    data: (UserRecord(), null as List<UserRecord> | null),
};

export type FindPetsByUserResponseRecordPropsType = typeof FindPetsByUserResponseRecordProps;
export const FindPetsByUserResponseRecord = Record(FindPetsByUserResponseRecordProps, FindPetsByUserResponseRecordProps.recType);
export type FindPetsByUserResponseRecord = RecordOf<FindPetsByUserResponseRecordPropsType>;

knownRecordFactories.set(FindPetsByUserResponseRecordProps.recType, FindPetsByUserResponseRecord);


class FindPetsByUserResponseRecordUtils extends ApiRecordUtils<FindPetsByUserResponse, FindPetsByUserResponseRecord> {
	public normalize(apiObject: FindPetsByUserResponse, asEntity?: boolean): FindPetsByUserResponse {
		(apiObject as any).recType = "FindPetsByUserResponseRecord";
        responseMetaRecordUtils.normalize(apiObject.meta);
        if (apiObject.data) { userRecordUtils.normalizeArray(apiObject.data); } 
		return apiObject;
	}

	public fromApiPassthrough(apiObject: FindPetsByUserResponse): List<UserRecord> {
	    if (!apiObject.data) {return List<UserRecord>(); }
		const normalizedApiObject = userRecordUtils.normalizeArray(apiObject.data);
		return appFromJS(normalizedApiObject);
	}

	public fromApiPassthroughAsEntities(apiObject: FindPetsByUserResponse): NormalizedRecordEntities {
		if (!apiObject.data) {return {entities: {}, result: List<string>()}; }
		return ApiRecordUtils.toNormalizedRecordEntities(userRecordUtils.normalizeArrayAsEntities(apiObject.data), true);
	}
}

export const findPetsByUserResponseRecordUtils = new FindPetsByUserResponseRecordUtils();
