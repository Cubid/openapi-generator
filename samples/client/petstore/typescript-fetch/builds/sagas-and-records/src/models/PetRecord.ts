/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {ApiRecordUtils, knownRecordFactories} from "../runtimeSagasAndRecords";
import {List, Record, RecordOf} from 'immutable';
import {Schema, schema, NormalizedSchema} from "normalizr";

import {
    Pet,
    PetStatusEnum,
} from './Pet';

import {
    Category,
} from './Category';
import {
    DeploymentRequestStatus,
} from './DeploymentRequestStatus';
import {
    Tag,
} from './Tag';
import {
    WarningCode,
} from './WarningCode';

import {
    CategoryRecord,
    categoryRecordUtils,
} from './CategoryRecord';
import {
    TagRecord,
    tagRecordUtils,
} from './TagRecord';

export const PetRecordProps = {
	recType: "PetRecord" as "PetRecord",
    id: "-1",
    friendId: null as string | null,
    friendAge: 0,
    age: 2,
    isHappy: true,
    isTall: false,
    category: CategoryRecord(),
    optionalCategory: (CategoryRecord(), null as CategoryRecord | null),
    name: "",
    _entities: (CategoryRecord(), null as List<CategoryRecord> | null),
    surname: null as string | null,
    photoUrls: List<string>(),
    warningStatus: WarningCode.ReduceVolumeRangeToAvoidLargeSteps,
    depStatus: null as DeploymentRequestStatus | null,
    alternateStatus: DeploymentRequestStatus.New,
    otherDepStatuses: List<DeploymentRequestStatus>(),
    tags: (TagRecord(), List<TagRecord>()),
    optionalTags: (TagRecord(), null as List<TagRecord> | null),
    status: PetStatusEnum.Pending,
};

export type PetRecordPropsType = typeof PetRecordProps;
export const PetRecord = Record(PetRecordProps, PetRecordProps.recType);
export type PetRecord = RecordOf<PetRecordPropsType>;

knownRecordFactories.set(PetRecordProps.recType, PetRecord);

export const PetRecordEntityProps = {
	...PetRecordProps,
	recType: "PetRecordEntity" as "PetRecordEntity",
    category: "-1",
    optionalCategory: null as string | null,
    _entities: null as List<string> | null,
    tags: List<string>(),
    optionalTags: null as List<string> | null,
};

export type PetRecordEntityPropsType = typeof PetRecordEntityProps;
export const PetRecordEntity = Record(PetRecordEntityProps, PetRecordEntityProps.recType);
export type PetRecordEntity = RecordOf<PetRecordEntityPropsType>;

knownRecordFactories.set(PetRecordEntityProps.recType, PetRecordEntity);

class PetRecordUtils extends ApiRecordUtils<Pet, PetRecord> {
	public normalize(apiObject: Pet, asEntity?: boolean): Pet {
		(apiObject as any).recType = asEntity ? "PetRecordEntity" : "PetRecord";
        (apiObject as any).id = apiObject.id.toString();
        if (apiObject.friendId) { (apiObject as any).friendId = apiObject.friendId.toString(); } 
        categoryRecordUtils.normalize(apiObject.category);
        if (apiObject.optionalCategory) { categoryRecordUtils.normalize(apiObject.optionalCategory); } 
        if (apiObject.entities) { categoryRecordUtils.normalizeArray(apiObject.entities); } 
        (apiObject as any)._entities = apiObject.entities;
        delete apiObject.entities;
        tagRecordUtils.normalizeArray(apiObject.tags);
        if (apiObject.optionalTags) { tagRecordUtils.normalizeArray(apiObject.optionalTags); } 
		return apiObject;
	}

	public getSchema(): Schema {
	    return new schema.Entity("pet", {
            category: categoryRecordUtils.getSchema(),
            optionalCategory: categoryRecordUtils.getSchema(),
            _entities: [categoryRecordUtils.getSchema()],
            tags: [tagRecordUtils.getSchema()],
            optionalTags: [tagRecordUtils.getSchema()],
		});
	}

	public toApi(record: PetRecord): Pet {
        const apiObject = super.toApi(record);
        apiObject.id = parseFloat(record.id);
        if (record.friendId) { apiObject.friendId = parseFloat(record.friendId); } 
        apiObject.category = categoryRecordUtils.toApi(record.category);
        if (record.optionalCategory) { apiObject.optionalCategory = categoryRecordUtils.toApi(record.optionalCategory); } 
        if (record._entities) { (apiObject as any)._entities = categoryRecordUtils.toApiArray(record._entities); } 
        apiObject.entities = (apiObject as any)._entities;
        delete (apiObject as any)._entities;
        apiObject.tags = tagRecordUtils.toApiArray(record.tags);
        if (record.optionalTags) { apiObject.optionalTags = tagRecordUtils.toApiArray(record.optionalTags); } 
        return apiObject;
    }
}

export const petRecordUtils = new PetRecordUtils();
