/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetMatchingRolesResponse,
    GetMatchingRolesResponseFromJSON,
    GetMatchingRolesResponseToJSON,
    GetProductTypeResponse,
    GetProductTypeResponseFromJSON,
    GetProductTypeResponseToJSON,
} from '../models';

export interface GetAffiliateProductTypeRequest {
    affiliateId: number;
}

export interface GetMatchingRolesRequest {
    affiliateId: number;
    video: boolean;
    mono: boolean;
    claperEnabled: boolean;
    messaging: boolean;
    signage: boolean;
    audioBitRate?: string;
    relatedMediaType?: string;
    brandingType?: string;
}

/**
 * 
 */
export class AffiliateApi extends runtime.BaseAPI {

    /**
     * Returns single product types for the given affiliate
     */
    async getAffiliateProductTypeRaw(requestParameters: GetAffiliateProductTypeRequest): Promise<runtime.ApiResponse<GetProductTypeResponse>> {
        if (requestParameters.affiliateId === null || requestParameters.affiliateId === undefined) {
            throw new runtime.RequiredError('affiliateId','Required parameter requestParameters.affiliateId was null or undefined when calling getAffiliateProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/affiliates/{affiliate-id}/product-type`.replace(`{${"affiliate-id"}}`, encodeURIComponent(String(requestParameters.affiliateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProductTypeResponseFromJSON(jsonValue));
    }

    /**
     * Returns single product types for the given affiliate
     */
    async getAffiliateProductType(affiliateId: number): Promise<GetProductTypeResponse> {
        const response = await this.getAffiliateProductTypeRaw({ affiliateId: affiliateId });
        return await response.value();
    }

    /**
     * Get the matching roles for the given affiliate
     */
    async getMatchingRolesRaw(requestParameters: GetMatchingRolesRequest): Promise<runtime.ApiResponse<GetMatchingRolesResponse>> {
        if (requestParameters.affiliateId === null || requestParameters.affiliateId === undefined) {
            throw new runtime.RequiredError('affiliateId','Required parameter requestParameters.affiliateId was null or undefined when calling getMatchingRoles.');
        }

        if (requestParameters.video === null || requestParameters.video === undefined) {
            throw new runtime.RequiredError('video','Required parameter requestParameters.video was null or undefined when calling getMatchingRoles.');
        }

        if (requestParameters.mono === null || requestParameters.mono === undefined) {
            throw new runtime.RequiredError('mono','Required parameter requestParameters.mono was null or undefined when calling getMatchingRoles.');
        }

        if (requestParameters.claperEnabled === null || requestParameters.claperEnabled === undefined) {
            throw new runtime.RequiredError('claperEnabled','Required parameter requestParameters.claperEnabled was null or undefined when calling getMatchingRoles.');
        }

        if (requestParameters.messaging === null || requestParameters.messaging === undefined) {
            throw new runtime.RequiredError('messaging','Required parameter requestParameters.messaging was null or undefined when calling getMatchingRoles.');
        }

        if (requestParameters.signage === null || requestParameters.signage === undefined) {
            throw new runtime.RequiredError('signage','Required parameter requestParameters.signage was null or undefined when calling getMatchingRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.video !== undefined) {
            queryParameters['video'] = requestParameters.video;
        }

        if (requestParameters.mono !== undefined) {
            queryParameters['mono'] = requestParameters.mono;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audio-bit-rate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.relatedMediaType !== undefined) {
            queryParameters['related-media-type'] = requestParameters.relatedMediaType;
        }

        if (requestParameters.claperEnabled !== undefined) {
            queryParameters['claper-enabled'] = requestParameters.claperEnabled;
        }

        if (requestParameters.messaging !== undefined) {
            queryParameters['messaging'] = requestParameters.messaging;
        }

        if (requestParameters.signage !== undefined) {
            queryParameters['signage'] = requestParameters.signage;
        }

        if (requestParameters.brandingType !== undefined) {
            queryParameters['branding-type'] = requestParameters.brandingType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/affiliates/{affiliate-id}/matching-roles`.replace(`{${"affiliate-id"}}`, encodeURIComponent(String(requestParameters.affiliateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMatchingRolesResponseFromJSON(jsonValue));
    }

    /**
     * Get the matching roles for the given affiliate
     */
    async getMatchingRoles(affiliateId: number, video: boolean, mono: boolean, claperEnabled: boolean, messaging: boolean, signage: boolean, audioBitRate?: string, relatedMediaType?: string, brandingType?: string): Promise<GetMatchingRolesResponse> {
        const response = await this.getMatchingRolesRaw({ affiliateId: affiliateId, video: video, mono: mono, claperEnabled: claperEnabled, messaging: messaging, signage: signage, audioBitRate: audioBitRate, relatedMediaType: relatedMediaType, brandingType: brandingType });
        return await response.value();
    }

}
