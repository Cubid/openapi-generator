/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Api} from './';
import {List} from 'immutable';
import {all, fork, put, takeLatest} from "redux-saga/effects";
import {apiCall, createSagaAction as originalCreateSagaAction, BasePayloadApiAction, NormalizedRecordEntities, normalizedEntities} from "../runtimeSagasAndRecords";
import {Action} from "redux-ts-simple";

import {
    GetChannelPublishedStatusResponse,
    GetChannelPublishedStatusResponseRecord,
    getChannelPublishedStatusResponseRecordUtils,
} from '../models';

import {
    ChannelPublishedStatus,
} from '../models';

const createSagaAction = <T>(type: string) => originalCreateSagaAction<T>(type, {namespace: "api_brandApi"});

export const brandApiSagaMap = new Map<string, () => Generator<any, any, any>>([
    	["getChannelPublishedStatus", getChannelPublishedStatusSaga],
	]
);

export function *brandApiAllSagas() {
	yield all([...brandApiSagaMap.values()].map(actionSaga => fork(actionSaga)));
}

//region getChannelPublishedStatus

export interface PayloadGetChannelPublishedStatus extends PayloadGetChannelPublishedStatusRequest {
}

export interface PayloadGetChannelPublishedStatusRequest {
    channelId: number;
}

export const getChannelPublishedStatusRequest = createSagaAction<PayloadGetChannelPublishedStatusRequest>("getChannelPublishedStatusRequest");
export const getChannelPublishedStatusSuccess = createSagaAction<ChannelPublishedStatus>("getChannelPublishedStatusSuccess");
export const getChannelPublishedStatusFailure = createSagaAction<any>("getChannelPublishedStatusFailure");

export const getChannelPublishedStatus = createSagaAction<PayloadGetChannelPublishedStatus>("getChannelPublishedStatus");

export function *getChannelPublishedStatusSaga() {
	yield takeLatest(getChannelPublishedStatus, getChannelPublishedStatusSagaImp);
}

export function *getChannelPublishedStatusSagaImp(_action_: Action<PayloadGetChannelPublishedStatus>) {
	try {
        const {
            channelId,
   		} = _action_.payload;

		yield put(getChannelPublishedStatusRequest(_action_.payload));

		const response: Required<GetChannelPublishedStatusResponse> = yield apiCall(Api.brandApi, Api.brandApi.getChannelPublishedStatus,
            channelId,
		);

		let successReturnValue: any = undefined;
    		successReturnValue = getChannelPublishedStatusResponseRecordUtils.fromApiPassthrough(response);
	    	yield put(getChannelPublishedStatusSuccess(successReturnValue));

		return successReturnValue;
	} catch (error) {
		yield put(getChannelPublishedStatusFailure(error));
		return error;
	}
}
//endregion
