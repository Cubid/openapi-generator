/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
{{#operations}}
	{{#operation}}

		{{^useSingleRequestParameter}}
			async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}}{{#hasMore}}, {{/hasMore}}{{/allParams}}): Promise
			<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {
			{{#returnType}}
					const response = await this.{{nickname}}Raw({{#allParams.0}}
						{ {{#allParams}}{{paramName}}: {{paramName}}{{#hasMore}}
							, {{/hasMore}}{{/allParams}} }{{/allParams.0}});
					return await response.value();
			{{/returnType}}
			{{^returnType}}
					await this.{{nickname}}Raw({{#allParams.0}}
						{ {{#allParams}}{{paramName}}: {{paramName}}{{#hasMore}}
							, {{/hasMore}}{{/allParams}} }{{/allParams.0}});
			{{/returnType}}
				}
		{{/useSingleRequestParameter}}
		{{#useSingleRequestParameter}}
				async {{nickname}}({{#allParams.0}}
					requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}
					Request{{/allParams.0}}): Promise
			<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {
			{{#returnType}}
					const response = await this.{{nickname}}Raw({{#allParams.0}}requestParameters{{/allParams.0}});
					return await response.value();
			{{/returnType}}
			{{^returnType}}
					await this.{{nickname}}Raw({{#allParams.0}}requestParameters{{/allParams.0}});
			{{/returnType}}
				}
		{{/useSingleRequestParameter}}
	{{/operation}}
{{/operations}}
