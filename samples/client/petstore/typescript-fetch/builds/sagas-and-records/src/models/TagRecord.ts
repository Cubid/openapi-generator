/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {ApiRecordUtils, knownRecordFactories} from "../runtimeSagasAndRecords";
import {List, Record, RecordOf} from 'immutable';
import {Schema, schema, NormalizedSchema} from "normalizr";

import { Tag } from './';



export const TagRecordProps = {
	recType: "TagRecord" as "TagRecord",
    id: null as string | null,
    name: null as string | null,
};

export type TagRecordPropsType = typeof TagRecordProps;
export const TagRecord = Record(TagRecordProps, TagRecordProps.recType);
export type TagRecord = RecordOf<TagRecordPropsType>;

knownRecordFactories.set(TagRecordProps.recType, TagRecord);

export const TagRecordEntityProps = {
	...TagRecordProps,
	recType: "TagRecordEntity" as "TagRecordEntity",
};

export type TagRecordEntityPropsType = typeof TagRecordEntityProps;
export const TagRecordEntity = Record(TagRecordEntityProps, TagRecordEntityProps.recType);
export type TagRecordEntity = RecordOf<TagRecordEntityPropsType>;

knownRecordFactories.set(TagRecordEntityProps.recType, TagRecordEntity);

class TagRecordUtils extends ApiRecordUtils<Tag, TagRecord> {
	public normalize(apiObject: Tag, asEntity?: boolean): Tag {
		(apiObject as any).recType = asEntity ? "TagRecordEntity" : "TagRecord";
        if (apiObject.id) { (apiObject as any).id = apiObject.id.toString(); } 
		return apiObject;
	}

	public getSchema(): Schema {
	    return new schema.Entity("tag", {
		});
	}
}

export const tagRecordUtils = new TagRecordUtils();
