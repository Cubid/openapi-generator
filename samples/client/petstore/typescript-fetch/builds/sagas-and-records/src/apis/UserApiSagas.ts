/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Api} from './';
import {List} from 'immutable';
import {all, fork, put, takeLatest} from "redux-saga/effects";
import {apiCall, createSagaAction as originalCreateSagaAction, BasePayloadApiAction, NormalizedRecordEntities, normalizedEntities} from "../runtimeSagasAndRecords";
import {Action} from "redux-ts-simple";

import {
    DefaultMetaOnlyResponse,
    DefaultMetaOnlyResponseRecord,
    defaultMetaOnlyResponseRecordUtils,
    User,
    UserRecord,
    userRecordUtils,
} from '../models';



const createSagaAction = <T>(type: string) => originalCreateSagaAction<T>(type, {namespace: "api_userApi"});

export const userApiSagaMap = new Map<string, () => Generator<any, any, any>>([
    	["createUser", createUserSaga],
    	["createUsersWithArrayInput", createUsersWithArrayInputSaga],
    	["createUsersWithListInput", createUsersWithListInputSaga],
    	["deleteUser", deleteUserSaga],
    	["getUserByName", getUserByNameSaga],
    	["loginUser", loginUserSaga],
    	["logoutUser", logoutUserSaga],
    	["updateUser", updateUserSaga],
	]
);

export function *userApiAllSagas() {
	yield all([...userApiSagaMap.values()].map(actionSaga => fork(actionSaga)));
}

//region createUser

export interface PayloadCreateUser extends PayloadCreateUserRequest {
}

export interface PayloadCreateUserRequest {
    body: UserRecord;
}

export const createUserRequest = createSagaAction<PayloadCreateUserRequest>("createUserRequest");
export const createUserSuccess = createSagaAction<void>("createUserSuccess");
export const createUserFailure = createSagaAction<any>("createUserFailure");

export const createUser = createSagaAction<PayloadCreateUser>("createUser");

export function *createUserSaga() {
	yield takeLatest(createUser, createUserSagaImp);
}

export function *createUserSagaImp(action: Action<PayloadCreateUser>) {
	try {
        const {
            body,
   		} = action.payload;

		yield put(createUserRequest(action.payload));

		const response = yield apiCall(Api.userApi, Api.userApi.createUser,
            userRecordUtils.toApi(body),
		);

		    yield put(createUserSuccess());

        return undefined;
	} catch (error) {
		yield put(createUserFailure(error));
		return error;
	}
}
//endregion
//region createUsersWithArrayInput

export interface PayloadCreateUsersWithArrayInput extends PayloadCreateUsersWithArrayInputRequest {
}

export interface PayloadCreateUsersWithArrayInputRequest {
    body: List<UserRecord>;
}

export const createUsersWithArrayInputRequest = createSagaAction<PayloadCreateUsersWithArrayInputRequest>("createUsersWithArrayInputRequest");
export const createUsersWithArrayInputSuccess = createSagaAction<void>("createUsersWithArrayInputSuccess");
export const createUsersWithArrayInputFailure = createSagaAction<any>("createUsersWithArrayInputFailure");

export const createUsersWithArrayInput = createSagaAction<PayloadCreateUsersWithArrayInput>("createUsersWithArrayInput");

export function *createUsersWithArrayInputSaga() {
	yield takeLatest(createUsersWithArrayInput, createUsersWithArrayInputSagaImp);
}

export function *createUsersWithArrayInputSagaImp(action: Action<PayloadCreateUsersWithArrayInput>) {
	try {
        const {
            body,
   		} = action.payload;

		yield put(createUsersWithArrayInputRequest(action.payload));

		const response = yield apiCall(Api.userApi, Api.userApi.createUsersWithArrayInput,
            userRecordUtils.toApiArray(body),
		);

		    yield put(createUsersWithArrayInputSuccess());

        return undefined;
	} catch (error) {
		yield put(createUsersWithArrayInputFailure(error));
		return error;
	}
}
//endregion
//region createUsersWithListInput

export interface PayloadCreateUsersWithListInput extends PayloadCreateUsersWithListInputRequest {
}

export interface PayloadCreateUsersWithListInputRequest {
    body: List<UserRecord>;
}

export const createUsersWithListInputRequest = createSagaAction<PayloadCreateUsersWithListInputRequest>("createUsersWithListInputRequest");
export const createUsersWithListInputSuccess = createSagaAction<void>("createUsersWithListInputSuccess");
export const createUsersWithListInputFailure = createSagaAction<any>("createUsersWithListInputFailure");

export const createUsersWithListInput = createSagaAction<PayloadCreateUsersWithListInput>("createUsersWithListInput");

export function *createUsersWithListInputSaga() {
	yield takeLatest(createUsersWithListInput, createUsersWithListInputSagaImp);
}

export function *createUsersWithListInputSagaImp(action: Action<PayloadCreateUsersWithListInput>) {
	try {
        const {
            body,
   		} = action.payload;

		yield put(createUsersWithListInputRequest(action.payload));

		const response = yield apiCall(Api.userApi, Api.userApi.createUsersWithListInput,
            userRecordUtils.toApiArray(body),
		);

		    yield put(createUsersWithListInputSuccess());

        return undefined;
	} catch (error) {
		yield put(createUsersWithListInputFailure(error));
		return error;
	}
}
//endregion
//region deleteUser

export interface PayloadDeleteUser extends PayloadDeleteUserRequest {
}

export interface PayloadDeleteUserRequest {
    username: string;
}

export const deleteUserRequest = createSagaAction<PayloadDeleteUserRequest>("deleteUserRequest");
export const deleteUserSuccess = createSagaAction<void>("deleteUserSuccess");
export const deleteUserFailure = createSagaAction<any>("deleteUserFailure");

export const deleteUser = createSagaAction<PayloadDeleteUser>("deleteUser");

export function *deleteUserSaga() {
	yield takeLatest(deleteUser, deleteUserSagaImp);
}

export function *deleteUserSagaImp(action: Action<PayloadDeleteUser>) {
	try {
        const {
            username,
   		} = action.payload;

		yield put(deleteUserRequest(action.payload));

		const response = yield apiCall(Api.userApi, Api.userApi.deleteUser,
            username,
		);

		    yield put(deleteUserSuccess());

        return undefined;
	} catch (error) {
		yield put(deleteUserFailure(error));
		return error;
	}
}
//endregion
//region getUserByName

export interface PayloadGetUserByName extends PayloadGetUserByNameRequest, BasePayloadApiAction {
}

export interface PayloadGetUserByNameRequest {
    username: string;
}

export const getUserByNameRequest = createSagaAction<PayloadGetUserByNameRequest>("getUserByNameRequest");
export const getUserByNameSuccess = createSagaAction<UserRecord>("getUserByNameSuccess");
export const getUserByNameSuccess_Entities = createSagaAction<NormalizedRecordEntities>("getUserByNameSuccess_Entities");
export const getUserByNameFailure = createSagaAction<any>("getUserByNameFailure");

export const getUserByName = createSagaAction<PayloadGetUserByName>("getUserByName");

export function *getUserByNameSaga() {
	yield takeLatest(getUserByName, getUserByNameSagaImp);
}

export function *getUserByNameSagaImp(action: Action<PayloadGetUserByName>) {
	try {
		const {toEntities, toInlined = !toEntities, ...requestPayload} = action.payload;
        const {
            username,
   		} = action.payload;

		yield put(getUserByNameRequest(requestPayload));

		const response: Required<User> = yield apiCall(Api.userApi, Api.userApi.getUserByName,
            username,
		);

		let successReturnValue: any = undefined;
		if (toEntities) {
            successReturnValue = userRecordUtils.fromApiArrayAsEntities([response]);
			yield put(normalizedEntities(successReturnValue));
			yield put(getUserByNameSuccess_Entities(successReturnValue));
		}
		if (toInlined) {
            successReturnValue = userRecordUtils.fromApi(response);
		    yield put(getUserByNameSuccess(successReturnValue));
		}

        return successReturnValue;
	} catch (error) {
		yield put(getUserByNameFailure(error));
		return error;
	}
}
//endregion
//region loginUser

export interface PayloadLoginUser extends PayloadLoginUserRequest {
}

export interface PayloadLoginUserRequest {
    username: string;
    password: string;
}

export const loginUserRequest = createSagaAction<PayloadLoginUserRequest>("loginUserRequest");
export const loginUserSuccess = createSagaAction<string>("loginUserSuccess");
export const loginUserFailure = createSagaAction<any>("loginUserFailure");

export const loginUser = createSagaAction<PayloadLoginUser>("loginUser");

export function *loginUserSaga() {
	yield takeLatest(loginUser, loginUserSagaImp);
}

export function *loginUserSagaImp(action: Action<PayloadLoginUser>) {
	try {
        const {
            username,
            password,
   		} = action.payload;

		yield put(loginUserRequest(action.payload));

		const response: Required<string> = yield apiCall(Api.userApi, Api.userApi.loginUser,
            username,
            password,
		);

		let successReturnValue: any = undefined;
		    yield put(loginUserSuccess(response));

		return response;
	} catch (error) {
		yield put(loginUserFailure(error));
		return error;
	}
}
//endregion
//region logoutUser

export interface PayloadLogoutUser {
}


export const logoutUserRequest = createSagaAction<void>("logoutUserRequest");
export const logoutUserSuccess = createSagaAction<void>("logoutUserSuccess");
export const logoutUserFailure = createSagaAction<any>("logoutUserFailure");

export const logoutUser = createSagaAction<PayloadLogoutUser>("logoutUser");

export function *logoutUserSaga() {
	yield takeLatest(logoutUser, logoutUserSagaImp);
}

export function *logoutUserSagaImp(action: Action<PayloadLogoutUser>) {
	try {

		yield put(logoutUserRequest());

		const response = yield apiCall(Api.userApi, Api.userApi.logoutUser,
		);

		    yield put(logoutUserSuccess());

        return undefined;
	} catch (error) {
		yield put(logoutUserFailure(error));
		return error;
	}
}
//endregion
//region updateUser

export interface PayloadUpdateUser extends PayloadUpdateUserRequest {
}

export interface PayloadUpdateUserRequest {
    username: string;
    body: UserRecord;
}

export const updateUserRequest = createSagaAction<PayloadUpdateUserRequest>("updateUserRequest");
export const updateUserSuccess = createSagaAction<void>("updateUserSuccess");
export const updateUserFailure = createSagaAction<any>("updateUserFailure");

export const updateUser = createSagaAction<PayloadUpdateUser>("updateUser");

export function *updateUserSaga() {
	yield takeLatest(updateUser, updateUserSagaImp);
}

export function *updateUserSagaImp(action: Action<PayloadUpdateUser>) {
	try {
        const {
            username,
            body,
   		} = action.payload;

		yield put(updateUserRequest(action.payload));

		const response = yield apiCall(Api.userApi, Api.userApi.updateUser,
            username,
            userRecordUtils.toApi(body),
		);

		    yield put(updateUserSuccess());

        return undefined;
	} catch (error) {
		yield put(updateUserFailure(error));
		return error;
	}
}
//endregion
